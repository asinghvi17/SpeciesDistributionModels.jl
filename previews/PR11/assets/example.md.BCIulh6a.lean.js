import{_ as s,c as e,a5 as n,o as i}from"./chunks/framework.gEoEsEEK.js";const h=JSON.parse('{"title":"Example of a full species distribution modelling workflow","description":"","frontmatter":{},"headers":[],"relativePath":"example.md","filePath":"example.md","lastUpdated":null}'),t={name:"example.md"};function l(p,a,o,c,d,r){return i(),e("div",null,a[0]||(a[0]=[n(`<h1 id="Example-of-a-full-species-distribution-modelling-workflow" tabindex="-1">Example of a full species distribution modelling workflow <a class="header-anchor" href="#Example-of-a-full-species-distribution-modelling-workflow" aria-label="Permalink to &quot;Example of a full species distribution modelling workflow {#Example-of-a-full-species-distribution-modelling-workflow}&quot;">​</a></h1><h2 id="Environmental-data" tabindex="-1">Environmental data <a class="header-anchor" href="#Environmental-data" aria-label="Permalink to &quot;Environmental data {#Environmental-data}&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#| echo: false</span></span>
<span class="line"><span>if !haskey(ENV, &quot;RASTERDATASOURCES_PATH&quot;)</span></span>
<span class="line"><span>    ENV[&quot;RASTERDATASOURCES_PATH&quot;] = &quot;.&quot;;</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>using CairoMakie</span></span>
<span class="line"><span>CairoMakie.activate!(type = &quot;png&quot;)</span></span></code></pre></div><p>MarkdownAST.LineBreak()</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div><h2 id="environmental-data" tabindex="-1">Environmental data <a class="header-anchor" href="#environmental-data" aria-label="Permalink to &quot;Environmental data&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>{julia} using CairoMakie Rasters.rplot(bio_aus)</span></span></code></pre></div><h2 id="occurrence-data" tabindex="-1">Occurrence data <a class="header-anchor" href="#occurrence-data" aria-label="Permalink to &quot;Occurrence data&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>{julia} using GBIF2, SpeciesDistributionModels sp = species_match(&amp;quot;Eucalyptus regnans&amp;quot;) occurrences_raw = occurrence_search(sp; year = (1970,2000), country = &amp;quot;AU&amp;quot;, hasCoordinate = true, limit = 2000) occurrences = thin(occurrences_raw.geometry, 5000)</span></span></code></pre></div><h2 id="background-points" tabindex="-1">Background points <a class="header-anchor" href="#background-points" aria-label="Permalink to &quot;Background points&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>{julia} using StatsBase bg_indices = sample(findall(boolmask(bio_aus)), 500) bg_points = DimPoints(bio_aus)[bg_indices] fig, ax, pl = plot(bio_aus.bio1) scatter!(ax, occurrences; color = :red) scatter!(ax, bg_points; color = :grey) fig</span></span></code></pre></div><h2 id="handling-data" tabindex="-1">Handling data <a class="header-anchor" href="#handling-data" aria-label="Permalink to &quot;Handling data&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>{julia} using SpeciesDistributionModels p_data = extract(bio_aus, occurrences; skipmissing = true) bg_data = bio_aus[bg_indices] data = sdmdata(p_data, bg_data; resampler = CV(nfolds = 3))</span></span></code></pre></div><h2 id="fitting-an-ensemble" tabindex="-1">Fitting an ensemble <a class="header-anchor" href="#fitting-an-ensemble" aria-label="Permalink to &quot;Fitting an ensemble&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>{julia} using Maxnet: MaxnetBinaryClassifier using EvoTrees: EvoTreeClassifier using MLJGLMInterface: LinearBinaryClassifier models = (   maxnet = MaxnetBinaryClassifier(),   brt = EvoTreeClassifier(),   glm = LinearBinaryClassifier() )</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ensemble = sdm(data, models)</span></span></code></pre></div><h2 id="evaluating-an-ensemble" tabindex="-1">Evaluating an ensemble <a class="header-anchor" href="#evaluating-an-ensemble" aria-label="Permalink to &quot;Evaluating an ensemble&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>{julia} import SpeciesDistributionModels as SDM ev = SDM.evaluate(ensemble; measures = (; auc, accuracy))</span></span></code></pre></div><h2 id="predicting" tabindex="-1">Predicting <a class="header-anchor" href="#predicting" aria-label="Permalink to &quot;Predicting&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>{julia} pred = SDM.predict(ensemble, bio_aus; reducer = mean) plot(pred; colorrange = (0,1))</span></span></code></pre></div><h2 id="understanding-the-model" tabindex="-1">Understanding the model <a class="header-anchor" href="#understanding-the-model" aria-label="Permalink to &quot;Understanding the model&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>{julia} expl = SDM.explain(ensemble; method = ShapleyValues(8)) interactive_response_curves(expl) \`\`\`</span></span></code></pre></div>`,21)]))}const g=s(t,[["render",l]]);export{h as __pageData,g as default};
